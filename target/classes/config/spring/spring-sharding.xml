<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:rdb="http://www.dangdang.com/schema/ddframe/rdb"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.dangdang.com/schema/ddframe/rdb
        http://www.dangdang.com/schema/ddframe/rdb/rdb.xsd">
        
		<import resource="spring-database.xml"/>
		<context:component-scan base-package="com.study.dangdang.sharding.jdbc" />
		
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<property name="basePackage" value ="com.study.dangdang.sharding.jdbc.mapper"></property>
			<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		</bean>
		
		<!-- 配置sqlSessionFactory --> 
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			<property name="dataSource" ref="shardingDataSource"/>  
        	<property name="mapperLocations" value="classpath*:config/mapper/*Mapper.xml"/>  
		</bean>
		
		<!-- 定义读写分离数据源, 读写分离数据源实现了DataSource接口, 可直接当做数据源处理 -->
    	<rdb:master-slave-data-source id="dbtbl_0" master-data-source-ref="sharding_0" slave-data-sources-ref="sharding_2" />
    	<rdb:master-slave-data-source id="dbtbl_1" master-data-source-ref="sharding_1" slave-data-sources-ref="sharding_2" />
    	
    	
		 <!-- 路由表、路由库规则配置，可以指定algorithm-class专门自己实现具体的路由规则，也可以使用表达式-->
    	<rdb:strategy id="databaseShardingStrategy" sharding-columns="company_id" algorithm-class="com.study.dangdang.sharding.jdbc.algorithm.ModuleSingleKeyDatabaseShardingAlgorithm"/>
    	<rdb:strategy id="tableShardingStrategy" sharding-columns="company_id" algorithm-class="com.study.dangdang.sharding.jdbc.algorithm.ModuleSingleKeyTableShardingAlgorithm"/>
		
		<!-- 使用表达式方式 -->
	    <!-- <rdb:strategy id="databaseShardingStrategy" sharding-columns="user_id" algorithm-expression="sharding_${user_id.longValue() % 2}"/>
	    <rdb:strategy id="tableShardingStrategy" sharding-columns="user_id" algorithm-expression="t_student_${user_id.longValue() % 2}"/>
	     -->
	    <rdb:data-source id="shardingDataSource">
	        <rdb:sharding-rule data-sources="dbtbl_0,dbtbl_1" default-data-source="dbtbl_0">
	            <rdb:table-rules>
	                <rdb:table-rule logic-table="t_user" actual-tables="dbtbl_${0..1}.t_user_${0..2}" database-strategy="databaseShardingStrategy" table-strategy="tableShardingStrategy"/>
	            </rdb:table-rules>
	            <rdb:binding-table-rules>
	                <rdb:binding-table-rule logic-tables="t_user"/>
	            </rdb:binding-table-rules>
	            <rdb:default-database-strategy sharding-columns="none" algorithm-class="com.dangdang.ddframe.rdb.sharding.api.strategy.database.NoneDatabaseShardingAlgorithm"/>
	            <rdb:default-table-strategy sharding-columns="none" algorithm-class="com.dangdang.ddframe.rdb.sharding.api.strategy.table.NoneTableShardingAlgorithm"/>
	        </rdb:sharding-rule>
	        <rdb:props>
	        	<!--是否开启SQL,false:关闭  -->
	            <prop key="metrics.enable">false</prop>
	        </rdb:props>
	    </rdb:data-source>
	    
	    
	    
	    <!-- 事务 -->  
	    <bean id="transactionManager"  
	          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
	        <property name="dataSource" ref="shardingDataSource" />  
	    </bean> 
	  
	    <tx:annotation-driven transaction-manager="transactionManager" /> 
	    
</beans>